---
format: gfm
---

# Linear model

```{python}
import numpy as np
import polars as pl
import statsmodels.api as sm
import statsmodels.formula.api as smf
from marginaleffects import comparisons, predictions

df = sm.datasets.get_rdataset("Guerry", "HistData").data
mod = smf.ols("Literacy ~ Pop1831 * Desertion", df)
fit = mod.fit()
```

# `comparisons()`

## Difference

```{python}
comparisons(fit, variables = "Pop1831", value = 1, comparison = "differenceavg")
```
```{python}
comparisons(fit, variables = "Pop1831", value = 1, comparison = "difference").head()
```

## Ratio

```{python}
comparisons(fit, variables = "Pop1831", value = 1, comparison = "ratioavg")
```

```{python}
comparisons(fit, variables = "Pop1831", value = 1, comparison = "ratio").head()
```

## Group averages (SEs are broken)

```{python}
comparisons(fit, variables = "Pop1831", value = 1, comparison = "difference", by = "Region")
```

# `predictions()` 

```{python}
predictions(fit).head()
```

## Group averages (SEs are broken)

```{python}
predictions(fit, by = "Region")
```

# `hypothesis` argument


```{python}
hyp = np.array([1, 0, -1, 0, 0, 0])
predictions(fit, by = "Region", hypothesis = hyp)

hyp = np.vstack([
    [1, 0, -1, 0, 0, 0],
    [1, 0, 0, -1, 0, 0]
]).T
predictions(fit, by = "Region", hypothesis = hyp)
```

Which corresponds to:

```{python}
p = predictions(fit, by = "Region")
print(p["estimate"][0] - p["estimate"][2])
print(p["estimate"][0] - p["estimate"][3])
```


```{python}
predictions(fit, by = "Region", hypothesis = "reference")
```

# GLM

```{python}
df = sm.datasets.get_rdataset("Guerry", "HistData").data
mod = smf.ols("Literacy ~ Pop1831 * Desertion", df)
fit = mod.fit()
df["bin"] = df["Literacy"] > df["Literacy"].median()
df["bin"] = df["bin"].replace({True: 1, False: 0})
mod = smf.glm("bin ~ Pop1831 * Desertion", df, family = sm.families.Binomial())
fit = mod.fit()
comparisons(fit, comparison = "differenceavg")
```